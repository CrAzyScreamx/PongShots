/*
 * This source file was generated by the Gradle 'init' task
 */
package org.pongshots;

import ch.qos.logback.core.encoder.EchoEncoder;
import org.apache.coyote.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.HttpStatus;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(Controller.class)
class MainWebLayerTest {

    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    void cleanup() throws Exception {
        // Ensure game is stopped before each test
        try {
            mockMvc.perform(post("/game/stop"));
        } catch (Exception e) {
            // Ignore if the game was not started
        }
    }

    @Test
    void failPurposely() {
        assert(false);
    }

    @Test
    void isHomeEndpointAlive() throws Exception {
        // Test "/" path to ensure its alive
        mockMvc.perform(get("/"))
                .andExpect(status().isOk());
    }

    @Test
    void isHomeEndpointDetailedAlive() throws Exception {
        // Test "/" path with detailed parameter to ensure its alive
        mockMvc.perform(get("/").param("detailed", "true"))
                .andExpect(status().isOk());
    }

    @Test
    void isGameStartedAlive() throws Exception {
        // Test "/game/start" path to ensure its alive
        mockMvc.perform(post("/game/start"))
                .andExpect(status().isOk());
    }

    @Test
    void isGameStatusAlive() throws Exception {
        // Test "/game/status" path to ensure its alive
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
    }

    @Test
    void isGameResetAlive() throws Exception {
        // Test "/game/reset" path to ensure its alive
        mockMvc.perform(post("/game/start"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().isOk());
    }

    @Test
    void isGameStopAlive() throws Exception {
        // Test "/game/stop" path to ensure its alive
        mockMvc.perform(post("/game/start"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/stop"))
                .andExpect(status().isOk());
    }

    @Test
    void isGamePongShotAlive() throws Exception {
        // Test "/game/pongshot" path to ensure its alive
        mockMvc.perform(post("/game/start"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/pongshot")
                .content("{\"power\": 1}")
                .contentType("application/json"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(1));
    }
}

@WebMvcTest(Controller.class)
class MainDetailedTest {

    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    void cleanup() throws Exception {
        // Ensure game is stopped before each test
        try {
            mockMvc.perform(post("/game/stop"));
        } catch (Exception e) {
            // Ignore if the game was not started
        }
    }

    @Test
    void CheckResetGameStatusCode() throws Exception {
        // CheckStatus --> Reset Game - Status code should return 400
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
    }

    @Test
    void CheckStopGameStatusCode() throws Exception {
        // CheckStatus --> Stop Game - Status code should return 400
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/stop"))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
    }

    @Test
    void CheckStartGameTwice() throws Exception{
        // Check Status --> Start Game --> Start Game - Status code should return 200,304 and power=0
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.NOT_MODIFIED.value()));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(0));
    }

    @Test
    void CheckNegativePongShot() throws Exception {
        // Check Status --> Start Game --> PongShot (-1) - Status code should return 400 and power=0
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": -1}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(0));
    }

    @Test
    void CheckHighPongShot() throws Exception {
        // Check Status --> Start Game --> PongShot (101) - Status code should return 400 and power=0
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 101}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(0));
    }

    @Test
    void CheckNormalPongShot() throws Exception {
        // Check Status --> Start Game --> PongShot (15) - Status code should return 200 and power=15
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 15}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(15));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(15));
    }

    @Test
    void CheckResetGameWithValue() throws Exception {
        // Check Status --> Start Game --> PongShot (5) --> Reset Game - Status code should return 200 and power=0
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 5}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(5));
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().is(HttpStatus.OK.value()));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(0));
    }

    @Test
    void CheckStopGameAndReset() throws Exception {
        // Check Status --> Start Game --> Reset Game --> Stop Game --> Reset Game - Status code should be 400
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().is(HttpStatus.OK.value()));
        mockMvc.perform(post("/game/stop"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pongShots").value(0))
                .andExpect(jsonPath("$.gameStarted").value(false));
    }

    @Test
    void HighDetailedGameTest() throws Exception {
        // Check Status --> Start Game --> PongShot (10) --> PongShot (20) --> Reset Game --> Pong Shot (30) - Status code should be 200 and power=30
        mockMvc.perform(get("/game/status"))
                .andExpect(status().isOk());
        mockMvc.perform(post("/game/start"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(0));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 10}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(10));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 20}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(30));
        mockMvc.perform(post("/game/reset"))
                .andExpect(status().is(HttpStatus.OK.value()));
        mockMvc.perform(post("/game/pongshot").content("{\"power\": 30}")
                .contentType("application/json"))
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.pongShots").value(30));
    }
}
